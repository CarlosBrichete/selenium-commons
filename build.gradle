plugins {
    id "com.jfrog.bintray" version "1.7"
    id "de.undercouch.download" version "3.1.2"
}


repositories {
  jcenter()
  mavenCentral()
  mavenLocal()
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'
apply plugin: 'eclipse'


publishing {
	publications {
	    mavenJava(MavenPublication) {
    		from components.java
				artifact sourcesJar
            	artifact javadocJar
        }
	}
}

group = 'com.liferay.gs'
version = '1.0.2'

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = 'lfrgs-selenium-commons'
        desc = 'lfrgs-selenium-commons'
		licenses = ['Apache-2.0']
		userOrg = System.getenv('BINTRAY_USER')
        labels = ['lfrgs-selenium-commons', 'test', 'selenium', 'liferay', 'gs']
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        vcsUrl = 'https://github.com/manoelcyreno/lfrgs-selenium-commons.git'
        version {
            name = project.version
            desc = 'lfrgs-selenium-commons: Selenium framework for Liferay GS projects'
            released  = new Date()
            vcsTag = project.version
        }
    }
}

ext.junitVersion = '4.12'
ext.seleniumVersion = '3.0.0'
ext.htmlunitVersion = '2.27'

dependencies {
	compile group: 'junit', name: 'junit', version:junitVersion
	compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:seleniumVersion
	compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:seleniumVersion
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:seleniumVersion
	compile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version:seleniumVersion
	compile group: 'org.seleniumhq.selenium', name: 'selenium-support', version:seleniumVersion
	compile group: 'org.seleniumhq.selenium', name: 'htmlunit-driver', version:htmlunitVersion
}


// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}


// A custom task to show report on tests that have run
task viewResults(dependsOn: ['test'] , type:Exec) {
		workingDir './build/reports/tests'
		commandLine 'cmd', '/c', 'start index.html'
}

task setupSelenium(){

    def configurationProperties = new Properties()
    file("src/main/resources/com/liferay/gs/testFramework/configuration.properties").withInputStream {
        stream -> configurationProperties.load(stream)
    }

    def defaultPropertiesPath = configurationProperties['defaultPropertiesFile']
    def phantomJSPath = configurationProperties['PhantomJS_Path']
    def geckoDriverPath = configurationProperties['GeckoDriver_Path']
    def webDriversPath =  configurationProperties['webDrivers_Path']
    def webDriversFile = new File( webDriversPath )

    /*
     * ********************************************************
     * CREATE PROPERTIES FILE
     * ********************************************************
     */
    def defaultPropertiesFile = new File( defaultPropertiesPath )

    if( !defaultPropertiesFile.exists() ) {
      defaultPropertiesFile.getParentFile().mkdirs()

        defaultPropertiesFile.withWriterAppend { w -> w << "environment=http://localhost:8080\nlinkToLogOut=:/c/portal/logout\n\n#The browser atribute to use SELENIUM GRID should be received: firefox, chrome, ie.\n#For use a localhost configuration (Selenium IDE) set to use:\n#'defaultFF' for use the Firefox browser or 'defaultGC' for use the Google Chrome browser\n#or 'phantomjs' or 'defaultGCHeadless' Google Chrome Headless browser.\nbrowser=defaultFF\ntime-out=10\n"}
      }
    }


    /*
     * ********************************************************
     * INSTALL PHANTOMJS
     * ********************************************************
     */
    def phantomJSFile = new File( phantomJSPath )

    if( !phantomJSFile.exists() ) {
        webDriversFile.mkdirs()

        download {
            src 'https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-macosx.zip'
            dest new File(webDriversPath, 'phantomjs-2.1.1-macosx.zip')
        }

        copy {
            from zipTree(new File(webDriversPath, 'phantomjs-2.1.1-macosx.zip'))
            into webDriversFile
        }

        def phantomJSDir = new File(webDriversPath, 'phantomjs-2.1.1-macosx')
        phantomJSDir.renameTo(new File(webDriversPath, 'phantomjs'))
    }

    /*
     * ********************************************************
     * INSTALL GECKO DRIVER
     * ********************************************************
     */
    def geckoDriverFile = new File( geckoDriverPath )

    if( !geckoDriverFile.exists() ) {
        webDriversFile.mkdirs()

        download {
            src 'https://github.com/mozilla/geckodriver/releases/download/v0.11.1/geckodriver-v0.11.1-macos.tar.gz'
            dest new File(webDriversPath, 'geckodriver-v0.11.1-macos.tar.gz')
        }

        copy {
            from tarTree(new File(webDriversPath, 'geckodriver-v0.11.1-macos.tar.gz'))
            into webDriversFile
        }
    }
}